Grading at Sat Sep 29 09:09:31 UTC 2018
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==885== Memcheck, a memory error detector
==885== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==885== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==885== Command: ./tester h.txt d.txt
==885== Parent PID: 884
==885== 
==885== Conditional jump or move depends on uninitialised value(s)
==885==    at 0x4011D7: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==885==    by 0x402026: main (test-input.c:81)
==885== 
==885== 
==885== HEAP SUMMARY:
==885==     in use at exit: 120 bytes in 1 blocks
==885==   total heap usage: 119 allocs, 118 frees, 15,728 bytes allocated
==885== 
==885== LEAK SUMMARY:
==885==    definitely lost: 120 bytes in 1 blocks
==885==    indirectly lost: 0 bytes in 0 blocks
==885==      possibly lost: 0 bytes in 0 blocks
==885==    still reachable: 0 bytes in 0 blocks
==885==         suppressed: 0 bytes in 0 blocks
==885== Rerun with --leak-check=full to see details of leaked memory
==885== 
==885== For counts of detected and suppressed errors, rerun with: -v
==885== Use --track-origins=yes to see where uninitialised values come from
==885== ERROR SUMMARY: 24 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==891== Memcheck, a memory error detector
==891== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==891== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==891== Command: ./tester i1 i2
==891== Parent PID: 890
==891== 
==891== Conditional jump or move depends on uninitialised value(s)
==891==    at 0x4011D7: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==891==    by 0x402026: main (test-input.c:81)
==891== 
==891== Invalid read of size 8
==891==    at 0x401214: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==891==    by 0x402026: main (test-input.c:81)
==891==  Address 0x520a4b8 is 8 bytes before a block of size 32 free'd
==891==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==891==    by 0x40158C: add_card_to (in /graderhome/work/c4prj2_input/tester)
==891==    by 0x401CD9: simple_hand_from_string (test-input.c:16)
==891==    by 0x401D43: simple_read_input (test-input.c:32)
==891==    by 0x401FCE: main (test-input.c:77)
==891==  Block was alloc'd at
==891==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==891==    by 0x40158C: add_card_to (in /graderhome/work/c4prj2_input/tester)
==891==    by 0x401CD9: simple_hand_from_string (test-input.c:16)
==891==    by 0x401D43: simple_read_input (test-input.c:32)
==891==    by 0x401FCE: main (test-input.c:77)
==891== 
==891== Invalid read of size 8
==891==    at 0x401217: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==891==    by 0x402026: main (test-input.c:81)
==891==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==891== 
==891== 
==891== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==891==  Access not within mapped region at address 0x0
==891==    at 0x401217: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==891==    by 0x402026: main (test-input.c:81)
==891==  If you believe this happened as a result of a stack
==891==  overflow in your program's main thread (unlikely but
==891==  possible), you can try to increase the size of the
==891==  main thread stack using the --main-stacksize= flag.
==891==  The main thread stack size used in this run was 8388608.
==891== 
==891== HEAP SUMMARY:
==891==     in use at exit: 3,504 bytes in 148 blocks
==891==   total heap usage: 287 allocs, 139 frees, 22,288 bytes allocated
==891== 
==891== LEAK SUMMARY:
==891==    definitely lost: 120 bytes in 1 blocks
==891==    indirectly lost: 0 bytes in 0 blocks
==891==      possibly lost: 0 bytes in 0 blocks
==891==    still reachable: 3,384 bytes in 147 blocks
==891==         suppressed: 0 bytes in 0 blocks
==891== Rerun with --leak-check=full to see details of leaked memory
==891== 
==891== For counts of detected and suppressed errors, rerun with: -v
==891== Use --track-origins=yes to see where uninitialised values come from
==891== ERROR SUMMARY: 121 errors from 3 contexts (suppressed: 0 from 0)

Overall Grade: C
